apply plugin: 'java'

ext {
    useJava = true
    useCpp = false
    skipDev = true
}

apply from: "${rootDir}/shared/opencv.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':wpilibj')

    compile project(':hal')
    compile project(':wpiutil')
    compile project(':ntcore')
    compile project(':cscore')
    compile project(':cameraserver')
    
    // These are not using testImplmentation because testablerobot is
    // distributing tests as part of the example.
    implementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    implementation 'org.mockito:mockito-core:2.23.4'
}

test {
    useJUnitPlatform()
}

if (!project.hasProperty('skipPMD')) {
    apply plugin: 'pmd'

    pmd {
        consoleOutput = true
        reportsDir = file("$project.buildDir/reports/pmd")
        ruleSetFiles = files(new File(rootDir, "styleguide/pmd-ruleset.xml"))
        ruleSets = []
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }
}

apply from: 'publish.gradle'

ext {
    templateDirectory = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/templates/")
    templateFile = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/templates/templates.json")
    exampleDirectory = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/examples/")
    exampleFile = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/examples/examples.json")
    commandDirectory = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/commands/")
    commandFile = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/commands/commands.json")
}

apply from: "${rootDir}/shared/examplecheck.gradle"
