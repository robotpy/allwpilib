if (!project.hasProperty('onlylinuxathena') && !project.hasProperty('onlylinuxraspbian') && !project.hasProperty('onlylinuxaarch64bionic')) {

    description = "A different kind of dashboard"

    apply plugin: 'cpp'
    apply plugin: 'c'
    apply plugin: 'google-test-test-suite'
    apply plugin: 'visual-studio'
    apply plugin: 'edu.wpi.first.NativeUtils'

    ext {
        nativeName = 'glass'
    }

    apply from: "${rootDir}/shared/config.gradle"

    project(':').libraryBuild.dependsOn build

    nativeUtils.exportsConfigs {
        glass {
            x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
                                '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
            x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure', '_CT??_R0?AVout_of_range', '_CTA3?AVout_of_range',
                                '_TI3?AVout_of_range', '_CT??_R0?AVbad_cast']
        }
    }

    model {
        components {
            "${nativeName}"(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs = ['src/lib/native/cpp']
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/lib/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio || it.targetPlatform.name == nativeUtils.wpi.platforms.raspbian || it.targetPlatform.name == nativeUtils.wpi.platforms.aarch64bionic) {
                        it.buildable = false
                        return
                    }
                    if (it instanceof SharedLibraryBinarySpec) {
                        it.buildable = false
                        return
                    }
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                    lib project: ':wpimath', library: 'wpimath', linkage: 'shared'
                    lib project: ':wpigui', library: 'wpigui', linkage: 'static'
                    nativeUtils.useRequiredLibrary(it, 'imgui_static')
                }
                appendDebugPathToBinaries(binaries)
            }
            "${nativeName}nt"(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs = ['src/libnt/native/cpp']
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/libnt/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio || it.targetPlatform.name == nativeUtils.wpi.platforms.raspbian || it.targetPlatform.name == nativeUtils.wpi.platforms.aarch64bionic) {
                        it.buildable = false
                        return
                    }
                    if (it instanceof SharedLibraryBinarySpec) {
                        it.buildable = false
                        return
                    }
                    lib library: nativeName, linkage: 'static'
                    lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                    lib project: ':wpimath', library: 'wpimath', linkage: 'shared'
                    lib project: ':wpigui', library: 'wpigui', linkage: 'static'
                    nativeUtils.useRequiredLibrary(it, 'imgui_static')
                }
                appendDebugPathToBinaries(binaries)
            }
            // By default, a development executable will be generated. This is to help the case of
            // testing specific functionality of the library.
            "${nativeName}App"(NativeExecutableSpec) {
                baseName = 'glass'
                sources {
                    cpp {
                        source {
                            srcDirs 'src/app/native/cpp'
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/app/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio || it.targetPlatform.name == nativeUtils.wpi.platforms.raspbian || it.targetPlatform.name == nativeUtils.wpi.platforms.aarch64bionic) {
                        it.buildable = false
                        return
                    }
                    lib library: 'glassnt', linkage: 'static'
                    lib library: nativeName, linkage: 'static'
                    lib project: ':ntcore', library: 'ntcore', linkage: 'static'
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'static'
                    lib project: ':wpimath', library: 'wpimath', linkage: 'static'
                    lib project: ':wpigui', library: 'wpigui', linkage: 'static'
                    nativeUtils.useRequiredLibrary(it, 'imgui_static')
                    if (it.targetPlatform.operatingSystem.isWindows()) {
                        it.linker.args << 'Gdi32.lib' << 'Shell32.lib' << 'd3d11.lib' << 'd3dcompiler.lib'
                    } else if (it.targetPlatform.operatingSystem.isMacOsX()) {
                        it.linker.args << '-framework' << 'Metal' << '-framework' << 'MetalKit' << '-framework' << 'Cocoa' << '-framework' << 'IOKit' << '-framework' << 'CoreFoundation' << '-framework' << 'CoreVideo' << '-framework' << 'QuartzCore'
                    } else {
                        it.linker.args << '-lX11'
                    }
                }
            }
        }
    }

    apply from: 'publish.gradle'
}
